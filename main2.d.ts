/* tslint:disable */// Generated by Haxe TypeScript Declaration Generator :)

export class Summer {
	constructor(a: number, b: number);
	print(): number;
}

export interface tink_core_LinkObject {
}

export interface tink_core_SignalObject<T> {
	/**
	 *  Registers a callback to be invoked every time the signal is triggered
	 *  @return A `CallbackLink` instance that can be used to unregister the callback
	 */
	listen(handler: (arg0: T) => void): tink_core_LinkObject;
}

export interface tink_core_FutureObject<T> {
	map<R>(f: (arg0: T) => R): tink_core_FutureObject<R>;
	/**
	 *  Caches the result to ensure the underlying tranform is performed once only.
	 *  Useful for tranformed futures, such as product of `map` and `flatMap`
	 *  so that the transformation function will not be invoked for every callback
	 */
	gather(): tink_core_FutureObject<T>;
}

export class haxe_io_Bytes {
	protected constructor(data: ArrayBuffer);
	readonly length: number;
	/**
	 * Returns the `len`-bytes long string stored at the given position `pos`,
	 * interpreted with the given `encoding` (UTF-8 by default).
	 */
	getString(pos: number, len: number, encoding?: any): string;
	/**
	 * Returns a `String` representation of the bytes interpreted as UTF-8.
	 */
	toString(): string;
}

export class Built {
	constructor();
	a: number;
	get_click(): tink_core_SignalObject<MouseEvent>;
	get_data(): tink_core_FutureObject<haxe_io_Bytes>;
	get_clickLeft(): tink_core_SignalObject<MouseEvent>;
	get_jsonData(): tink_core_FutureObject<any>;
	get_b(): number;
	get_c(): number;
	get_d(): number;
	get_e(): number;
	get_f(): number;
	set_f(param: number): number;
	get_g(): number;
	set_g(param: number): number;
	get_h(): number;
	set_h(param: number): number;
	get_i(): number;
	set_i(param: number): number;
	get_j(): number;
	get_k(): number;
	get_l(): number;
	static get_foo(): number;
}

export class Counter {
	constructor(cb: () => void);
}

export type Class<Summer> = {
}

export class Main {
	protected constructor();
	static getSummer(): Class<Summer>;
	static cippa(x: number): {a: number};
}